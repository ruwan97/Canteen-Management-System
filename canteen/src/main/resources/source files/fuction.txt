DROP FUNCTION IF EXISTS calculate_total_transaction_amount_function;
DELIMITER //
CREATE FUNCTION calculate_total_transaction_amount_function() RETURNS FLOAT DETERMINISTIC
BEGIN
DECLARE transactions_amount FLOAT DEFAULT 0.0;
SELECT SUM(order_amount) INTO transactions_amount 
FROM `transaction` 
WHERE DATE(`transaction_date`) = DATE(NOW()) 
GROUP BY `transaction_date`;
RETURN (transactions_amount);
END//
DELIMITER ;


DROP FUNCTION IF EXISTS calculate_daily_transactions_count_function;
DELIMITER //
CREATE FUNCTION calculate_daily_transactions_count_function() RETURNS INT DETERMINISTIC
BEGIN
DECLARE daily_transactions_count INT;
SELECT COUNT(transaction_id) INTO daily_transactions_count
FROM `transaction` 
WHERE DATE(`transaction_date`) = DATE(NOW()) 
GROUP BY `transaction_date`;
RETURN (daily_transactions_count);
END//
DELIMITER ;




//sample

DROP FUNCTION IF EXISTS calculate_transactions_summery;
DELIMITER //
CREATE FUNCTION calculate_transactions_summery() RETURNS FLOAT DETERMINISTIC
BEGIN
DECLARE transactions_amount FLOAT DEFAULT 0.0;
SELECT SUM(`quantity`*`total_price`) INTO transactions_amount 
FROM `orders_log` 
WHERE DATE(`delivered_at`) = DATE(NOW()) 
GROUP BY `delivered_at`;
RETURN (transactions_amount);
END//
DELIMITER ;
